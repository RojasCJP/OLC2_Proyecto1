
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA DISTINT DIV EQUALS EQUALSEQUALS FLOAT64 FLOATLITERAL FMT FUNC GOTO GREATER GREATEREQUAL ID IF IMPORT INT INTLITERAL LECOR LEKEY LEPAR LESS LESSEQUAL MINUS PACKAGE PLUS POINT PRINTF RETURN RICOR RIKEY RIPAR SEMICOLON STRINGLITERAL TIMES VARstart :  PACKAGE ID SEMICOLON IMPORT LEPAR STRINGLITERAL RIPAR  declarations codeListdeclarations : declarations declaration\n                    | declarationdeclaration :     VAR idList LECOR INTLITERAL RICOR FLOAT64 SEMICOLON\n                    |   VAR idList type SEMICOLONtype : INT\n            | FLOAT64idList :   idList COMMA ID\n                | IDcodeList : codeList code\n                | codecode : FUNC ID LEPAR RIPAR statementstatement : LEKEY instructions RIKEYinstructions : instructions instruction\n                    | instructioninstruction :  assign SEMICOLON\n                    | print SEMICOLON\n                    | if\n                    | gotoSt SEMICOLON\n                    | label\n                    | callFunc SEMICOLON\n                    | retSt SEMICOLONretSt : RETURNcallFunc : ID LEPAR RIPARlabel : ID COLONgotoSt : GOTO IDif : IF expression LEKEY GOTO ID SEMICOLON RIKEYassign : access EQUALS finalExpassign :   ID EQUALS expression\n                | ID EQUALS accessprint : FMT POINT PRINTF LEPAR STRINGLITERAL COMMA printValue RIPARprintValue :   INT LEPAR finalExp RIPAR\n                    | finalExpexpression :   finalExp PLUS finalExp\n                    | finalExp MINUS finalExp\n                    | finalExp TIMES finalExp\n                    | finalExp DIV finalExp\n                    | finalExp GREATER finalExp\n                    | finalExp LESS finalExp\n                    | finalExp GREATEREQUAL finalExp\n                    | finalExp LESSEQUAL finalExp\n                    | finalExp EQUALSEQUALS finalExp\n                    | finalExp DISTINT finalExp\n                    | finalExpfinalExp : ID\n                | INTLITERAL\n                | MINUS INTLITERAL\n                | FLOATLITERALaccess :   ID LECOR INT LEPAR finalExp RIPAR RICOR\n                | ID LECOR finalExp RICOR'
    
_lr_action_items = {'PACKAGE':([0,],[2,]),'$end':([1,12,14,18,31,50,],[0,-1,-11,-10,-12,-13,]),'ID':([2,11,15,23,32,34,35,38,40,46,47,51,52,53,54,55,56,57,58,59,61,79,80,81,82,83,84,85,86,87,88,90,93,108,114,116,],[3,17,19,28,44,44,-15,-18,-20,64,69,-14,-16,-17,-19,-21,-22,64,71,-25,64,64,64,64,64,64,64,64,64,64,64,64,106,64,-27,64,]),'SEMICOLON':([3,21,22,24,33,36,37,39,41,42,48,64,65,67,68,69,70,71,72,73,74,89,91,94,95,96,97,98,99,100,101,102,103,106,110,115,],[4,-7,27,-6,49,52,53,54,55,56,-23,-45,-44,-46,-48,-26,-28,-45,-29,-30,-24,-47,-50,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,109,-49,-31,]),'IMPORT':([4,],[5,]),'LEPAR':([5,19,44,75,77,112,],[6,25,60,90,92,116,]),'STRINGLITERAL':([6,92,],[7,105,]),'RIPAR':([7,25,60,64,67,68,89,104,111,113,117,118,],[8,29,74,-45,-46,-48,-47,107,115,-33,118,-32,]),'VAR':([8,9,10,13,27,49,],[11,11,-3,-2,-5,-4,]),'FUNC':([9,10,12,13,14,18,27,31,49,50,],[15,-3,15,-2,-11,-10,-5,-12,-4,-13,]),'LECOR':([16,17,28,44,71,],[20,-9,-8,61,61,]),'COMMA':([16,17,28,105,],[23,-9,-8,108,]),'INT':([16,17,28,61,108,],[24,-9,-8,75,112,]),'FLOAT64':([16,17,28,30,],[21,-9,-8,33,]),'INTLITERAL':([20,46,57,58,61,66,79,80,81,82,83,84,85,86,87,88,90,108,116,],[26,67,67,67,67,89,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'RICOR':([26,64,67,68,76,89,107,],[30,-45,-46,-48,91,-47,110,]),'LEKEY':([29,63,64,65,67,68,89,94,95,96,97,98,99,100,101,102,103,],[32,78,-45,-44,-46,-48,-47,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,]),'FMT':([32,34,35,38,40,51,52,53,54,55,56,59,114,],[45,45,-15,-18,-20,-14,-16,-17,-19,-21,-22,-25,-27,]),'IF':([32,34,35,38,40,51,52,53,54,55,56,59,114,],[46,46,-15,-18,-20,-14,-16,-17,-19,-21,-22,-25,-27,]),'GOTO':([32,34,35,38,40,51,52,53,54,55,56,59,78,114,],[47,47,-15,-18,-20,-14,-16,-17,-19,-21,-22,-25,93,-27,]),'RETURN':([32,34,35,38,40,51,52,53,54,55,56,59,114,],[48,48,-15,-18,-20,-14,-16,-17,-19,-21,-22,-25,-27,]),'RIKEY':([34,35,38,40,51,52,53,54,55,56,59,109,114,],[50,-15,-18,-20,-14,-16,-17,-19,-21,-22,-25,114,-27,]),'EQUALS':([43,44,91,110,],[57,58,-50,-49,]),'COLON':([44,],[59,]),'POINT':([45,],[62,]),'MINUS':([46,57,58,61,64,65,67,68,71,79,80,81,82,83,84,85,86,87,88,89,90,108,116,],[66,66,66,66,-45,80,-46,-48,-45,66,66,66,66,66,66,66,66,66,66,-47,66,66,66,]),'FLOATLITERAL':([46,57,58,61,79,80,81,82,83,84,85,86,87,88,90,108,116,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'PRINTF':([62,],[77,]),'PLUS':([64,65,67,68,71,89,],[-45,79,-46,-48,-45,-47,]),'TIMES':([64,65,67,68,71,89,],[-45,81,-46,-48,-45,-47,]),'DIV':([64,65,67,68,71,89,],[-45,82,-46,-48,-45,-47,]),'GREATER':([64,65,67,68,71,89,],[-45,83,-46,-48,-45,-47,]),'LESS':([64,65,67,68,71,89,],[-45,84,-46,-48,-45,-47,]),'GREATEREQUAL':([64,65,67,68,71,89,],[-45,85,-46,-48,-45,-47,]),'LESSEQUAL':([64,65,67,68,71,89,],[-45,86,-46,-48,-45,-47,]),'EQUALSEQUALS':([64,65,67,68,71,89,],[-45,87,-46,-48,-45,-47,]),'DISTINT':([64,65,67,68,71,89,],[-45,88,-46,-48,-45,-47,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'declarations':([8,],[9,]),'declaration':([8,9,],[10,13,]),'codeList':([9,],[12,]),'code':([9,12,],[14,18,]),'idList':([11,],[16,]),'type':([16,],[22,]),'statement':([29,],[31,]),'instructions':([32,],[34,]),'instruction':([32,34,],[35,51,]),'assign':([32,34,],[36,36,]),'print':([32,34,],[37,37,]),'if':([32,34,],[38,38,]),'gotoSt':([32,34,],[39,39,]),'label':([32,34,],[40,40,]),'callFunc':([32,34,],[41,41,]),'retSt':([32,34,],[42,42,]),'access':([32,34,58,],[43,43,73,]),'expression':([46,58,],[63,72,]),'finalExp':([46,57,58,61,79,80,81,82,83,84,85,86,87,88,90,108,116,],[65,70,65,76,94,95,96,97,98,99,100,101,102,103,104,113,117,]),'printValue':([108,],[111,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> PACKAGE ID SEMICOLON IMPORT LEPAR STRINGLITERAL RIPAR declarations codeList','start',9,'p_start','optimizator.py',159),
  ('declarations -> declarations declaration','declarations',2,'p_declarations','optimizator.py',164),
  ('declarations -> declaration','declarations',1,'p_declarations','optimizator.py',165),
  ('declaration -> VAR idList LECOR INTLITERAL RICOR FLOAT64 SEMICOLON','declaration',7,'p_declaration','optimizator.py',174),
  ('declaration -> VAR idList type SEMICOLON','declaration',4,'p_declaration','optimizator.py',175),
  ('type -> INT','type',1,'p_type','optimizator.py',183),
  ('type -> FLOAT64','type',1,'p_type','optimizator.py',184),
  ('idList -> idList COMMA ID','idList',3,'p_idList','optimizator.py',192),
  ('idList -> ID','idList',1,'p_idList','optimizator.py',193),
  ('codeList -> codeList code','codeList',2,'p_codeList','optimizator.py',201),
  ('codeList -> code','codeList',1,'p_codeList','optimizator.py',202),
  ('code -> FUNC ID LEPAR RIPAR statement','code',5,'p_code','optimizator.py',211),
  ('statement -> LEKEY instructions RIKEY','statement',3,'p_statement','optimizator.py',216),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','optimizator.py',221),
  ('instructions -> instruction','instructions',1,'p_instructions','optimizator.py',222),
  ('instruction -> assign SEMICOLON','instruction',2,'p_instruction','optimizator.py',231),
  ('instruction -> print SEMICOLON','instruction',2,'p_instruction','optimizator.py',232),
  ('instruction -> if','instruction',1,'p_instruction','optimizator.py',233),
  ('instruction -> gotoSt SEMICOLON','instruction',2,'p_instruction','optimizator.py',234),
  ('instruction -> label','instruction',1,'p_instruction','optimizator.py',235),
  ('instruction -> callFunc SEMICOLON','instruction',2,'p_instruction','optimizator.py',236),
  ('instruction -> retSt SEMICOLON','instruction',2,'p_instruction','optimizator.py',237),
  ('retSt -> RETURN','retSt',1,'p_return','optimizator.py',242),
  ('callFunc -> ID LEPAR RIPAR','callFunc',3,'p_callFunc','optimizator.py',247),
  ('label -> ID COLON','label',2,'p_label','optimizator.py',252),
  ('gotoSt -> GOTO ID','gotoSt',2,'p_goto','optimizator.py',257),
  ('if -> IF expression LEKEY GOTO ID SEMICOLON RIKEY','if',7,'p_if','optimizator.py',262),
  ('assign -> access EQUALS finalExp','assign',3,'p_assign','optimizator.py',267),
  ('assign -> ID EQUALS expression','assign',3,'p_assign2','optimizator.py',272),
  ('assign -> ID EQUALS access','assign',3,'p_assign2','optimizator.py',273),
  ('print -> FMT POINT PRINTF LEPAR STRINGLITERAL COMMA printValue RIPAR','print',8,'p_print','optimizator.py',279),
  ('printValue -> INT LEPAR finalExp RIPAR','printValue',4,'p_printValue','optimizator.py',284),
  ('printValue -> finalExp','printValue',1,'p_printValue','optimizator.py',285),
  ('expression -> finalExp PLUS finalExp','expression',3,'p_expression','optimizator.py',294),
  ('expression -> finalExp MINUS finalExp','expression',3,'p_expression','optimizator.py',295),
  ('expression -> finalExp TIMES finalExp','expression',3,'p_expression','optimizator.py',296),
  ('expression -> finalExp DIV finalExp','expression',3,'p_expression','optimizator.py',297),
  ('expression -> finalExp GREATER finalExp','expression',3,'p_expression','optimizator.py',298),
  ('expression -> finalExp LESS finalExp','expression',3,'p_expression','optimizator.py',299),
  ('expression -> finalExp GREATEREQUAL finalExp','expression',3,'p_expression','optimizator.py',300),
  ('expression -> finalExp LESSEQUAL finalExp','expression',3,'p_expression','optimizator.py',301),
  ('expression -> finalExp EQUALSEQUALS finalExp','expression',3,'p_expression','optimizator.py',302),
  ('expression -> finalExp DISTINT finalExp','expression',3,'p_expression','optimizator.py',303),
  ('expression -> finalExp','expression',1,'p_expression','optimizator.py',304),
  ('finalExp -> ID','finalExp',1,'p_finalExp','optimizator.py',312),
  ('finalExp -> INTLITERAL','finalExp',1,'p_finalExp','optimizator.py',313),
  ('finalExp -> MINUS INTLITERAL','finalExp',2,'p_finalExp','optimizator.py',314),
  ('finalExp -> FLOATLITERAL','finalExp',1,'p_finalExp','optimizator.py',315),
  ('access -> ID LECOR INT LEPAR finalExp RIPAR RICOR','access',7,'p_access','optimizator.py',323),
  ('access -> ID LECOR finalExp RICOR','access',4,'p_access','optimizator.py',324),
]
