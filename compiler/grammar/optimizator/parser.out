Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> PACKAGE ID SEMICOLON IMPORT LEPAR STRINGLITERAL RIPAR declarations codeList
Rule 2     declarations -> declarations declaration
Rule 3     declarations -> declaration
Rule 4     declaration -> VAR idList LECOR INTLITERAL RICOR FLOAT64 SEMICOLON
Rule 5     declaration -> VAR idList type SEMICOLON
Rule 6     type -> INT
Rule 7     type -> FLOAT64
Rule 8     idList -> idList COMMA ID
Rule 9     idList -> ID
Rule 10    codeList -> codeList code
Rule 11    codeList -> code
Rule 12    code -> FUNC ID LEPAR RIPAR statement
Rule 13    statement -> LEKEY instructions RIKEY
Rule 14    instructions -> instructions instruction
Rule 15    instructions -> instruction
Rule 16    instruction -> assign SEMICOLON
Rule 17    instruction -> print SEMICOLON
Rule 18    instruction -> if
Rule 19    instruction -> gotoSt SEMICOLON
Rule 20    instruction -> label
Rule 21    instruction -> callFunc SEMICOLON
Rule 22    instruction -> retSt SEMICOLON
Rule 23    retSt -> RETURN
Rule 24    callFunc -> ID LEPAR RIPAR
Rule 25    label -> ID COLON
Rule 26    gotoSt -> GOTO ID
Rule 27    if -> IF expression LEKEY GOTO ID SEMICOLON RIKEY
Rule 28    assign -> access EQUALS finalExp
Rule 29    assign -> ID EQUALS expression
Rule 30    assign -> ID EQUALS access
Rule 31    print -> FMT POINT PRINTF LEPAR STRINGLITERAL COMMA printValue RIPAR
Rule 32    printValue -> INT LEPAR finalExp RIPAR
Rule 33    printValue -> finalExp
Rule 34    expression -> finalExp PLUS finalExp
Rule 35    expression -> finalExp MINUS finalExp
Rule 36    expression -> finalExp TIMES finalExp
Rule 37    expression -> finalExp DIV finalExp
Rule 38    expression -> finalExp GREATER finalExp
Rule 39    expression -> finalExp LESS finalExp
Rule 40    expression -> finalExp GREATEREQUAL finalExp
Rule 41    expression -> finalExp LESSEQUAL finalExp
Rule 42    expression -> finalExp EQUALSEQUALS finalExp
Rule 43    expression -> finalExp DISTINT finalExp
Rule 44    expression -> finalExp
Rule 45    finalExp -> ID
Rule 46    finalExp -> INTLITERAL
Rule 47    finalExp -> MINUS INTLITERAL
Rule 48    finalExp -> FLOATLITERAL
Rule 49    access -> ID LECOR INT LEPAR finalExp RIPAR RICOR
Rule 50    access -> ID LECOR finalExp RICOR

Terminals, with rules where they appear

COLON                : 25
COMMA                : 8 31
DISTINT              : 43
DIV                  : 37
EQUALS               : 28 29 30
EQUALSEQUALS         : 42
FLOAT64              : 4 7
FLOATLITERAL         : 48
FMT                  : 31
FUNC                 : 12
GOTO                 : 26 27
GREATER              : 38
GREATEREQUAL         : 40
ID                   : 1 8 9 12 24 25 26 27 29 30 45 49 50
IF                   : 27
IMPORT               : 1
INT                  : 6 32 49
INTLITERAL           : 4 46 47
LECOR                : 4 49 50
LEKEY                : 13 27
LEPAR                : 1 12 24 31 32 49
LESS                 : 39
LESSEQUAL            : 41
MINUS                : 35 47
PACKAGE              : 1
PLUS                 : 34
POINT                : 31
PRINTF               : 31
RETURN               : 23
RICOR                : 4 49 50
RIKEY                : 13 27
RIPAR                : 1 12 24 31 32 49
SEMICOLON            : 1 4 5 16 17 19 21 22 27
STRINGLITERAL        : 1 31
TIMES                : 36
VAR                  : 4 5
error                : 

Nonterminals, with rules where they appear

access               : 28 30
assign               : 16
callFunc             : 21
code                 : 10 11
codeList             : 1 10
declaration          : 2 3
declarations         : 1 2
expression           : 27 29
finalExp             : 28 32 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 49 50
gotoSt               : 19
idList               : 4 5 8
if                   : 18
instruction          : 14 15
instructions         : 13 14
label                : 20
print                : 17
printValue           : 31
retSt                : 22
start                : 0
statement            : 12
type                 : 5

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . PACKAGE ID SEMICOLON IMPORT LEPAR STRINGLITERAL RIPAR declarations codeList

    PACKAGE         shift and go to state 2

    start                          shift and go to state 1

state 1

    (0) S' -> start .



state 2

    (1) start -> PACKAGE . ID SEMICOLON IMPORT LEPAR STRINGLITERAL RIPAR declarations codeList

    ID              shift and go to state 3


state 3

    (1) start -> PACKAGE ID . SEMICOLON IMPORT LEPAR STRINGLITERAL RIPAR declarations codeList

    SEMICOLON       shift and go to state 4


state 4

    (1) start -> PACKAGE ID SEMICOLON . IMPORT LEPAR STRINGLITERAL RIPAR declarations codeList

    IMPORT          shift and go to state 5


state 5

    (1) start -> PACKAGE ID SEMICOLON IMPORT . LEPAR STRINGLITERAL RIPAR declarations codeList

    LEPAR           shift and go to state 6


state 6

    (1) start -> PACKAGE ID SEMICOLON IMPORT LEPAR . STRINGLITERAL RIPAR declarations codeList

    STRINGLITERAL   shift and go to state 7


state 7

    (1) start -> PACKAGE ID SEMICOLON IMPORT LEPAR STRINGLITERAL . RIPAR declarations codeList

    RIPAR           shift and go to state 8


state 8

    (1) start -> PACKAGE ID SEMICOLON IMPORT LEPAR STRINGLITERAL RIPAR . declarations codeList
    (2) declarations -> . declarations declaration
    (3) declarations -> . declaration
    (4) declaration -> . VAR idList LECOR INTLITERAL RICOR FLOAT64 SEMICOLON
    (5) declaration -> . VAR idList type SEMICOLON

    VAR             shift and go to state 11

    declarations                   shift and go to state 9
    declaration                    shift and go to state 10

state 9

    (1) start -> PACKAGE ID SEMICOLON IMPORT LEPAR STRINGLITERAL RIPAR declarations . codeList
    (2) declarations -> declarations . declaration
    (10) codeList -> . codeList code
    (11) codeList -> . code
    (4) declaration -> . VAR idList LECOR INTLITERAL RICOR FLOAT64 SEMICOLON
    (5) declaration -> . VAR idList type SEMICOLON
    (12) code -> . FUNC ID LEPAR RIPAR statement

    VAR             shift and go to state 11
    FUNC            shift and go to state 15

    codeList                       shift and go to state 12
    declaration                    shift and go to state 13
    code                           shift and go to state 14

state 10

    (3) declarations -> declaration .

    VAR             reduce using rule 3 (declarations -> declaration .)
    FUNC            reduce using rule 3 (declarations -> declaration .)


state 11

    (4) declaration -> VAR . idList LECOR INTLITERAL RICOR FLOAT64 SEMICOLON
    (5) declaration -> VAR . idList type SEMICOLON
    (8) idList -> . idList COMMA ID
    (9) idList -> . ID

    ID              shift and go to state 17

    idList                         shift and go to state 16

state 12

    (1) start -> PACKAGE ID SEMICOLON IMPORT LEPAR STRINGLITERAL RIPAR declarations codeList .
    (10) codeList -> codeList . code
    (12) code -> . FUNC ID LEPAR RIPAR statement

    $end            reduce using rule 1 (start -> PACKAGE ID SEMICOLON IMPORT LEPAR STRINGLITERAL RIPAR declarations codeList .)
    FUNC            shift and go to state 15

    code                           shift and go to state 18

state 13

    (2) declarations -> declarations declaration .

    VAR             reduce using rule 2 (declarations -> declarations declaration .)
    FUNC            reduce using rule 2 (declarations -> declarations declaration .)


state 14

    (11) codeList -> code .

    FUNC            reduce using rule 11 (codeList -> code .)
    $end            reduce using rule 11 (codeList -> code .)


state 15

    (12) code -> FUNC . ID LEPAR RIPAR statement

    ID              shift and go to state 19


state 16

    (4) declaration -> VAR idList . LECOR INTLITERAL RICOR FLOAT64 SEMICOLON
    (5) declaration -> VAR idList . type SEMICOLON
    (8) idList -> idList . COMMA ID
    (6) type -> . INT
    (7) type -> . FLOAT64

    LECOR           shift and go to state 20
    COMMA           shift and go to state 23
    INT             shift and go to state 24
    FLOAT64         shift and go to state 21

    type                           shift and go to state 22

state 17

    (9) idList -> ID .

    LECOR           reduce using rule 9 (idList -> ID .)
    COMMA           reduce using rule 9 (idList -> ID .)
    INT             reduce using rule 9 (idList -> ID .)
    FLOAT64         reduce using rule 9 (idList -> ID .)


state 18

    (10) codeList -> codeList code .

    FUNC            reduce using rule 10 (codeList -> codeList code .)
    $end            reduce using rule 10 (codeList -> codeList code .)


state 19

    (12) code -> FUNC ID . LEPAR RIPAR statement

    LEPAR           shift and go to state 25


state 20

    (4) declaration -> VAR idList LECOR . INTLITERAL RICOR FLOAT64 SEMICOLON

    INTLITERAL      shift and go to state 26


state 21

    (7) type -> FLOAT64 .

    SEMICOLON       reduce using rule 7 (type -> FLOAT64 .)


state 22

    (5) declaration -> VAR idList type . SEMICOLON

    SEMICOLON       shift and go to state 27


state 23

    (8) idList -> idList COMMA . ID

    ID              shift and go to state 28


state 24

    (6) type -> INT .

    SEMICOLON       reduce using rule 6 (type -> INT .)


state 25

    (12) code -> FUNC ID LEPAR . RIPAR statement

    RIPAR           shift and go to state 29


state 26

    (4) declaration -> VAR idList LECOR INTLITERAL . RICOR FLOAT64 SEMICOLON

    RICOR           shift and go to state 30


state 27

    (5) declaration -> VAR idList type SEMICOLON .

    VAR             reduce using rule 5 (declaration -> VAR idList type SEMICOLON .)
    FUNC            reduce using rule 5 (declaration -> VAR idList type SEMICOLON .)


state 28

    (8) idList -> idList COMMA ID .

    LECOR           reduce using rule 8 (idList -> idList COMMA ID .)
    COMMA           reduce using rule 8 (idList -> idList COMMA ID .)
    INT             reduce using rule 8 (idList -> idList COMMA ID .)
    FLOAT64         reduce using rule 8 (idList -> idList COMMA ID .)


state 29

    (12) code -> FUNC ID LEPAR RIPAR . statement
    (13) statement -> . LEKEY instructions RIKEY

    LEKEY           shift and go to state 32

    statement                      shift and go to state 31

state 30

    (4) declaration -> VAR idList LECOR INTLITERAL RICOR . FLOAT64 SEMICOLON

    FLOAT64         shift and go to state 33


state 31

    (12) code -> FUNC ID LEPAR RIPAR statement .

    FUNC            reduce using rule 12 (code -> FUNC ID LEPAR RIPAR statement .)
    $end            reduce using rule 12 (code -> FUNC ID LEPAR RIPAR statement .)


state 32

    (13) statement -> LEKEY . instructions RIKEY
    (14) instructions -> . instructions instruction
    (15) instructions -> . instruction
    (16) instruction -> . assign SEMICOLON
    (17) instruction -> . print SEMICOLON
    (18) instruction -> . if
    (19) instruction -> . gotoSt SEMICOLON
    (20) instruction -> . label
    (21) instruction -> . callFunc SEMICOLON
    (22) instruction -> . retSt SEMICOLON
    (28) assign -> . access EQUALS finalExp
    (29) assign -> . ID EQUALS expression
    (30) assign -> . ID EQUALS access
    (31) print -> . FMT POINT PRINTF LEPAR STRINGLITERAL COMMA printValue RIPAR
    (27) if -> . IF expression LEKEY GOTO ID SEMICOLON RIKEY
    (26) gotoSt -> . GOTO ID
    (25) label -> . ID COLON
    (24) callFunc -> . ID LEPAR RIPAR
    (23) retSt -> . RETURN
    (49) access -> . ID LECOR INT LEPAR finalExp RIPAR RICOR
    (50) access -> . ID LECOR finalExp RICOR

    ID              shift and go to state 44
    FMT             shift and go to state 45
    IF              shift and go to state 46
    GOTO            shift and go to state 47
    RETURN          shift and go to state 48

    instructions                   shift and go to state 34
    instruction                    shift and go to state 35
    assign                         shift and go to state 36
    print                          shift and go to state 37
    if                             shift and go to state 38
    gotoSt                         shift and go to state 39
    label                          shift and go to state 40
    callFunc                       shift and go to state 41
    retSt                          shift and go to state 42
    access                         shift and go to state 43

state 33

    (4) declaration -> VAR idList LECOR INTLITERAL RICOR FLOAT64 . SEMICOLON

    SEMICOLON       shift and go to state 49


state 34

    (13) statement -> LEKEY instructions . RIKEY
    (14) instructions -> instructions . instruction
    (16) instruction -> . assign SEMICOLON
    (17) instruction -> . print SEMICOLON
    (18) instruction -> . if
    (19) instruction -> . gotoSt SEMICOLON
    (20) instruction -> . label
    (21) instruction -> . callFunc SEMICOLON
    (22) instruction -> . retSt SEMICOLON
    (28) assign -> . access EQUALS finalExp
    (29) assign -> . ID EQUALS expression
    (30) assign -> . ID EQUALS access
    (31) print -> . FMT POINT PRINTF LEPAR STRINGLITERAL COMMA printValue RIPAR
    (27) if -> . IF expression LEKEY GOTO ID SEMICOLON RIKEY
    (26) gotoSt -> . GOTO ID
    (25) label -> . ID COLON
    (24) callFunc -> . ID LEPAR RIPAR
    (23) retSt -> . RETURN
    (49) access -> . ID LECOR INT LEPAR finalExp RIPAR RICOR
    (50) access -> . ID LECOR finalExp RICOR

    RIKEY           shift and go to state 50
    ID              shift and go to state 44
    FMT             shift and go to state 45
    IF              shift and go to state 46
    GOTO            shift and go to state 47
    RETURN          shift and go to state 48

    instruction                    shift and go to state 51
    assign                         shift and go to state 36
    print                          shift and go to state 37
    if                             shift and go to state 38
    gotoSt                         shift and go to state 39
    label                          shift and go to state 40
    callFunc                       shift and go to state 41
    retSt                          shift and go to state 42
    access                         shift and go to state 43

state 35

    (15) instructions -> instruction .

    RIKEY           reduce using rule 15 (instructions -> instruction .)
    ID              reduce using rule 15 (instructions -> instruction .)
    FMT             reduce using rule 15 (instructions -> instruction .)
    IF              reduce using rule 15 (instructions -> instruction .)
    GOTO            reduce using rule 15 (instructions -> instruction .)
    RETURN          reduce using rule 15 (instructions -> instruction .)


state 36

    (16) instruction -> assign . SEMICOLON

    SEMICOLON       shift and go to state 52


state 37

    (17) instruction -> print . SEMICOLON

    SEMICOLON       shift and go to state 53


state 38

    (18) instruction -> if .

    RIKEY           reduce using rule 18 (instruction -> if .)
    ID              reduce using rule 18 (instruction -> if .)
    FMT             reduce using rule 18 (instruction -> if .)
    IF              reduce using rule 18 (instruction -> if .)
    GOTO            reduce using rule 18 (instruction -> if .)
    RETURN          reduce using rule 18 (instruction -> if .)


state 39

    (19) instruction -> gotoSt . SEMICOLON

    SEMICOLON       shift and go to state 54


state 40

    (20) instruction -> label .

    RIKEY           reduce using rule 20 (instruction -> label .)
    ID              reduce using rule 20 (instruction -> label .)
    FMT             reduce using rule 20 (instruction -> label .)
    IF              reduce using rule 20 (instruction -> label .)
    GOTO            reduce using rule 20 (instruction -> label .)
    RETURN          reduce using rule 20 (instruction -> label .)


state 41

    (21) instruction -> callFunc . SEMICOLON

    SEMICOLON       shift and go to state 55


state 42

    (22) instruction -> retSt . SEMICOLON

    SEMICOLON       shift and go to state 56


state 43

    (28) assign -> access . EQUALS finalExp

    EQUALS          shift and go to state 57


state 44

    (29) assign -> ID . EQUALS expression
    (30) assign -> ID . EQUALS access
    (25) label -> ID . COLON
    (24) callFunc -> ID . LEPAR RIPAR
    (49) access -> ID . LECOR INT LEPAR finalExp RIPAR RICOR
    (50) access -> ID . LECOR finalExp RICOR

    EQUALS          shift and go to state 58
    COLON           shift and go to state 59
    LEPAR           shift and go to state 60
    LECOR           shift and go to state 61


state 45

    (31) print -> FMT . POINT PRINTF LEPAR STRINGLITERAL COMMA printValue RIPAR

    POINT           shift and go to state 62


state 46

    (27) if -> IF . expression LEKEY GOTO ID SEMICOLON RIKEY
    (34) expression -> . finalExp PLUS finalExp
    (35) expression -> . finalExp MINUS finalExp
    (36) expression -> . finalExp TIMES finalExp
    (37) expression -> . finalExp DIV finalExp
    (38) expression -> . finalExp GREATER finalExp
    (39) expression -> . finalExp LESS finalExp
    (40) expression -> . finalExp GREATEREQUAL finalExp
    (41) expression -> . finalExp LESSEQUAL finalExp
    (42) expression -> . finalExp EQUALSEQUALS finalExp
    (43) expression -> . finalExp DISTINT finalExp
    (44) expression -> . finalExp
    (45) finalExp -> . ID
    (46) finalExp -> . INTLITERAL
    (47) finalExp -> . MINUS INTLITERAL
    (48) finalExp -> . FLOATLITERAL

    ID              shift and go to state 64
    INTLITERAL      shift and go to state 67
    MINUS           shift and go to state 66
    FLOATLITERAL    shift and go to state 68

    expression                     shift and go to state 63
    finalExp                       shift and go to state 65

state 47

    (26) gotoSt -> GOTO . ID

    ID              shift and go to state 69


state 48

    (23) retSt -> RETURN .

    SEMICOLON       reduce using rule 23 (retSt -> RETURN .)


state 49

    (4) declaration -> VAR idList LECOR INTLITERAL RICOR FLOAT64 SEMICOLON .

    VAR             reduce using rule 4 (declaration -> VAR idList LECOR INTLITERAL RICOR FLOAT64 SEMICOLON .)
    FUNC            reduce using rule 4 (declaration -> VAR idList LECOR INTLITERAL RICOR FLOAT64 SEMICOLON .)


state 50

    (13) statement -> LEKEY instructions RIKEY .

    FUNC            reduce using rule 13 (statement -> LEKEY instructions RIKEY .)
    $end            reduce using rule 13 (statement -> LEKEY instructions RIKEY .)


state 51

    (14) instructions -> instructions instruction .

    RIKEY           reduce using rule 14 (instructions -> instructions instruction .)
    ID              reduce using rule 14 (instructions -> instructions instruction .)
    FMT             reduce using rule 14 (instructions -> instructions instruction .)
    IF              reduce using rule 14 (instructions -> instructions instruction .)
    GOTO            reduce using rule 14 (instructions -> instructions instruction .)
    RETURN          reduce using rule 14 (instructions -> instructions instruction .)


state 52

    (16) instruction -> assign SEMICOLON .

    RIKEY           reduce using rule 16 (instruction -> assign SEMICOLON .)
    ID              reduce using rule 16 (instruction -> assign SEMICOLON .)
    FMT             reduce using rule 16 (instruction -> assign SEMICOLON .)
    IF              reduce using rule 16 (instruction -> assign SEMICOLON .)
    GOTO            reduce using rule 16 (instruction -> assign SEMICOLON .)
    RETURN          reduce using rule 16 (instruction -> assign SEMICOLON .)


state 53

    (17) instruction -> print SEMICOLON .

    RIKEY           reduce using rule 17 (instruction -> print SEMICOLON .)
    ID              reduce using rule 17 (instruction -> print SEMICOLON .)
    FMT             reduce using rule 17 (instruction -> print SEMICOLON .)
    IF              reduce using rule 17 (instruction -> print SEMICOLON .)
    GOTO            reduce using rule 17 (instruction -> print SEMICOLON .)
    RETURN          reduce using rule 17 (instruction -> print SEMICOLON .)


state 54

    (19) instruction -> gotoSt SEMICOLON .

    RIKEY           reduce using rule 19 (instruction -> gotoSt SEMICOLON .)
    ID              reduce using rule 19 (instruction -> gotoSt SEMICOLON .)
    FMT             reduce using rule 19 (instruction -> gotoSt SEMICOLON .)
    IF              reduce using rule 19 (instruction -> gotoSt SEMICOLON .)
    GOTO            reduce using rule 19 (instruction -> gotoSt SEMICOLON .)
    RETURN          reduce using rule 19 (instruction -> gotoSt SEMICOLON .)


state 55

    (21) instruction -> callFunc SEMICOLON .

    RIKEY           reduce using rule 21 (instruction -> callFunc SEMICOLON .)
    ID              reduce using rule 21 (instruction -> callFunc SEMICOLON .)
    FMT             reduce using rule 21 (instruction -> callFunc SEMICOLON .)
    IF              reduce using rule 21 (instruction -> callFunc SEMICOLON .)
    GOTO            reduce using rule 21 (instruction -> callFunc SEMICOLON .)
    RETURN          reduce using rule 21 (instruction -> callFunc SEMICOLON .)


state 56

    (22) instruction -> retSt SEMICOLON .

    RIKEY           reduce using rule 22 (instruction -> retSt SEMICOLON .)
    ID              reduce using rule 22 (instruction -> retSt SEMICOLON .)
    FMT             reduce using rule 22 (instruction -> retSt SEMICOLON .)
    IF              reduce using rule 22 (instruction -> retSt SEMICOLON .)
    GOTO            reduce using rule 22 (instruction -> retSt SEMICOLON .)
    RETURN          reduce using rule 22 (instruction -> retSt SEMICOLON .)


state 57

    (28) assign -> access EQUALS . finalExp
    (45) finalExp -> . ID
    (46) finalExp -> . INTLITERAL
    (47) finalExp -> . MINUS INTLITERAL
    (48) finalExp -> . FLOATLITERAL

    ID              shift and go to state 64
    INTLITERAL      shift and go to state 67
    MINUS           shift and go to state 66
    FLOATLITERAL    shift and go to state 68

    finalExp                       shift and go to state 70

state 58

    (29) assign -> ID EQUALS . expression
    (30) assign -> ID EQUALS . access
    (34) expression -> . finalExp PLUS finalExp
    (35) expression -> . finalExp MINUS finalExp
    (36) expression -> . finalExp TIMES finalExp
    (37) expression -> . finalExp DIV finalExp
    (38) expression -> . finalExp GREATER finalExp
    (39) expression -> . finalExp LESS finalExp
    (40) expression -> . finalExp GREATEREQUAL finalExp
    (41) expression -> . finalExp LESSEQUAL finalExp
    (42) expression -> . finalExp EQUALSEQUALS finalExp
    (43) expression -> . finalExp DISTINT finalExp
    (44) expression -> . finalExp
    (49) access -> . ID LECOR INT LEPAR finalExp RIPAR RICOR
    (50) access -> . ID LECOR finalExp RICOR
    (45) finalExp -> . ID
    (46) finalExp -> . INTLITERAL
    (47) finalExp -> . MINUS INTLITERAL
    (48) finalExp -> . FLOATLITERAL

    ID              shift and go to state 71
    INTLITERAL      shift and go to state 67
    MINUS           shift and go to state 66
    FLOATLITERAL    shift and go to state 68

    expression                     shift and go to state 72
    access                         shift and go to state 73
    finalExp                       shift and go to state 65

state 59

    (25) label -> ID COLON .

    RIKEY           reduce using rule 25 (label -> ID COLON .)
    ID              reduce using rule 25 (label -> ID COLON .)
    FMT             reduce using rule 25 (label -> ID COLON .)
    IF              reduce using rule 25 (label -> ID COLON .)
    GOTO            reduce using rule 25 (label -> ID COLON .)
    RETURN          reduce using rule 25 (label -> ID COLON .)


state 60

    (24) callFunc -> ID LEPAR . RIPAR

    RIPAR           shift and go to state 74


state 61

    (49) access -> ID LECOR . INT LEPAR finalExp RIPAR RICOR
    (50) access -> ID LECOR . finalExp RICOR
    (45) finalExp -> . ID
    (46) finalExp -> . INTLITERAL
    (47) finalExp -> . MINUS INTLITERAL
    (48) finalExp -> . FLOATLITERAL

    INT             shift and go to state 75
    ID              shift and go to state 64
    INTLITERAL      shift and go to state 67
    MINUS           shift and go to state 66
    FLOATLITERAL    shift and go to state 68

    finalExp                       shift and go to state 76

state 62

    (31) print -> FMT POINT . PRINTF LEPAR STRINGLITERAL COMMA printValue RIPAR

    PRINTF          shift and go to state 77


state 63

    (27) if -> IF expression . LEKEY GOTO ID SEMICOLON RIKEY

    LEKEY           shift and go to state 78


state 64

    (45) finalExp -> ID .

    PLUS            reduce using rule 45 (finalExp -> ID .)
    MINUS           reduce using rule 45 (finalExp -> ID .)
    TIMES           reduce using rule 45 (finalExp -> ID .)
    DIV             reduce using rule 45 (finalExp -> ID .)
    GREATER         reduce using rule 45 (finalExp -> ID .)
    LESS            reduce using rule 45 (finalExp -> ID .)
    GREATEREQUAL    reduce using rule 45 (finalExp -> ID .)
    LESSEQUAL       reduce using rule 45 (finalExp -> ID .)
    EQUALSEQUALS    reduce using rule 45 (finalExp -> ID .)
    DISTINT         reduce using rule 45 (finalExp -> ID .)
    LEKEY           reduce using rule 45 (finalExp -> ID .)
    SEMICOLON       reduce using rule 45 (finalExp -> ID .)
    RICOR           reduce using rule 45 (finalExp -> ID .)
    RIPAR           reduce using rule 45 (finalExp -> ID .)


state 65

    (34) expression -> finalExp . PLUS finalExp
    (35) expression -> finalExp . MINUS finalExp
    (36) expression -> finalExp . TIMES finalExp
    (37) expression -> finalExp . DIV finalExp
    (38) expression -> finalExp . GREATER finalExp
    (39) expression -> finalExp . LESS finalExp
    (40) expression -> finalExp . GREATEREQUAL finalExp
    (41) expression -> finalExp . LESSEQUAL finalExp
    (42) expression -> finalExp . EQUALSEQUALS finalExp
    (43) expression -> finalExp . DISTINT finalExp
    (44) expression -> finalExp .

    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 81
    DIV             shift and go to state 82
    GREATER         shift and go to state 83
    LESS            shift and go to state 84
    GREATEREQUAL    shift and go to state 85
    LESSEQUAL       shift and go to state 86
    EQUALSEQUALS    shift and go to state 87
    DISTINT         shift and go to state 88
    LEKEY           reduce using rule 44 (expression -> finalExp .)
    SEMICOLON       reduce using rule 44 (expression -> finalExp .)


state 66

    (47) finalExp -> MINUS . INTLITERAL

    INTLITERAL      shift and go to state 89


state 67

    (46) finalExp -> INTLITERAL .

    PLUS            reduce using rule 46 (finalExp -> INTLITERAL .)
    MINUS           reduce using rule 46 (finalExp -> INTLITERAL .)
    TIMES           reduce using rule 46 (finalExp -> INTLITERAL .)
    DIV             reduce using rule 46 (finalExp -> INTLITERAL .)
    GREATER         reduce using rule 46 (finalExp -> INTLITERAL .)
    LESS            reduce using rule 46 (finalExp -> INTLITERAL .)
    GREATEREQUAL    reduce using rule 46 (finalExp -> INTLITERAL .)
    LESSEQUAL       reduce using rule 46 (finalExp -> INTLITERAL .)
    EQUALSEQUALS    reduce using rule 46 (finalExp -> INTLITERAL .)
    DISTINT         reduce using rule 46 (finalExp -> INTLITERAL .)
    LEKEY           reduce using rule 46 (finalExp -> INTLITERAL .)
    SEMICOLON       reduce using rule 46 (finalExp -> INTLITERAL .)
    RICOR           reduce using rule 46 (finalExp -> INTLITERAL .)
    RIPAR           reduce using rule 46 (finalExp -> INTLITERAL .)


state 68

    (48) finalExp -> FLOATLITERAL .

    PLUS            reduce using rule 48 (finalExp -> FLOATLITERAL .)
    MINUS           reduce using rule 48 (finalExp -> FLOATLITERAL .)
    TIMES           reduce using rule 48 (finalExp -> FLOATLITERAL .)
    DIV             reduce using rule 48 (finalExp -> FLOATLITERAL .)
    GREATER         reduce using rule 48 (finalExp -> FLOATLITERAL .)
    LESS            reduce using rule 48 (finalExp -> FLOATLITERAL .)
    GREATEREQUAL    reduce using rule 48 (finalExp -> FLOATLITERAL .)
    LESSEQUAL       reduce using rule 48 (finalExp -> FLOATLITERAL .)
    EQUALSEQUALS    reduce using rule 48 (finalExp -> FLOATLITERAL .)
    DISTINT         reduce using rule 48 (finalExp -> FLOATLITERAL .)
    LEKEY           reduce using rule 48 (finalExp -> FLOATLITERAL .)
    SEMICOLON       reduce using rule 48 (finalExp -> FLOATLITERAL .)
    RICOR           reduce using rule 48 (finalExp -> FLOATLITERAL .)
    RIPAR           reduce using rule 48 (finalExp -> FLOATLITERAL .)


state 69

    (26) gotoSt -> GOTO ID .

    SEMICOLON       reduce using rule 26 (gotoSt -> GOTO ID .)


state 70

    (28) assign -> access EQUALS finalExp .

    SEMICOLON       reduce using rule 28 (assign -> access EQUALS finalExp .)


state 71

    (49) access -> ID . LECOR INT LEPAR finalExp RIPAR RICOR
    (50) access -> ID . LECOR finalExp RICOR
    (45) finalExp -> ID .

    LECOR           shift and go to state 61
    PLUS            reduce using rule 45 (finalExp -> ID .)
    MINUS           reduce using rule 45 (finalExp -> ID .)
    TIMES           reduce using rule 45 (finalExp -> ID .)
    DIV             reduce using rule 45 (finalExp -> ID .)
    GREATER         reduce using rule 45 (finalExp -> ID .)
    LESS            reduce using rule 45 (finalExp -> ID .)
    GREATEREQUAL    reduce using rule 45 (finalExp -> ID .)
    LESSEQUAL       reduce using rule 45 (finalExp -> ID .)
    EQUALSEQUALS    reduce using rule 45 (finalExp -> ID .)
    DISTINT         reduce using rule 45 (finalExp -> ID .)
    SEMICOLON       reduce using rule 45 (finalExp -> ID .)


state 72

    (29) assign -> ID EQUALS expression .

    SEMICOLON       reduce using rule 29 (assign -> ID EQUALS expression .)


state 73

    (30) assign -> ID EQUALS access .

    SEMICOLON       reduce using rule 30 (assign -> ID EQUALS access .)


state 74

    (24) callFunc -> ID LEPAR RIPAR .

    SEMICOLON       reduce using rule 24 (callFunc -> ID LEPAR RIPAR .)


state 75

    (49) access -> ID LECOR INT . LEPAR finalExp RIPAR RICOR

    LEPAR           shift and go to state 90


state 76

    (50) access -> ID LECOR finalExp . RICOR

    RICOR           shift and go to state 91


state 77

    (31) print -> FMT POINT PRINTF . LEPAR STRINGLITERAL COMMA printValue RIPAR

    LEPAR           shift and go to state 92


state 78

    (27) if -> IF expression LEKEY . GOTO ID SEMICOLON RIKEY

    GOTO            shift and go to state 93


state 79

    (34) expression -> finalExp PLUS . finalExp
    (45) finalExp -> . ID
    (46) finalExp -> . INTLITERAL
    (47) finalExp -> . MINUS INTLITERAL
    (48) finalExp -> . FLOATLITERAL

    ID              shift and go to state 64
    INTLITERAL      shift and go to state 67
    MINUS           shift and go to state 66
    FLOATLITERAL    shift and go to state 68

    finalExp                       shift and go to state 94

state 80

    (35) expression -> finalExp MINUS . finalExp
    (45) finalExp -> . ID
    (46) finalExp -> . INTLITERAL
    (47) finalExp -> . MINUS INTLITERAL
    (48) finalExp -> . FLOATLITERAL

    ID              shift and go to state 64
    INTLITERAL      shift and go to state 67
    MINUS           shift and go to state 66
    FLOATLITERAL    shift and go to state 68

    finalExp                       shift and go to state 95

state 81

    (36) expression -> finalExp TIMES . finalExp
    (45) finalExp -> . ID
    (46) finalExp -> . INTLITERAL
    (47) finalExp -> . MINUS INTLITERAL
    (48) finalExp -> . FLOATLITERAL

    ID              shift and go to state 64
    INTLITERAL      shift and go to state 67
    MINUS           shift and go to state 66
    FLOATLITERAL    shift and go to state 68

    finalExp                       shift and go to state 96

state 82

    (37) expression -> finalExp DIV . finalExp
    (45) finalExp -> . ID
    (46) finalExp -> . INTLITERAL
    (47) finalExp -> . MINUS INTLITERAL
    (48) finalExp -> . FLOATLITERAL

    ID              shift and go to state 64
    INTLITERAL      shift and go to state 67
    MINUS           shift and go to state 66
    FLOATLITERAL    shift and go to state 68

    finalExp                       shift and go to state 97

state 83

    (38) expression -> finalExp GREATER . finalExp
    (45) finalExp -> . ID
    (46) finalExp -> . INTLITERAL
    (47) finalExp -> . MINUS INTLITERAL
    (48) finalExp -> . FLOATLITERAL

    ID              shift and go to state 64
    INTLITERAL      shift and go to state 67
    MINUS           shift and go to state 66
    FLOATLITERAL    shift and go to state 68

    finalExp                       shift and go to state 98

state 84

    (39) expression -> finalExp LESS . finalExp
    (45) finalExp -> . ID
    (46) finalExp -> . INTLITERAL
    (47) finalExp -> . MINUS INTLITERAL
    (48) finalExp -> . FLOATLITERAL

    ID              shift and go to state 64
    INTLITERAL      shift and go to state 67
    MINUS           shift and go to state 66
    FLOATLITERAL    shift and go to state 68

    finalExp                       shift and go to state 99

state 85

    (40) expression -> finalExp GREATEREQUAL . finalExp
    (45) finalExp -> . ID
    (46) finalExp -> . INTLITERAL
    (47) finalExp -> . MINUS INTLITERAL
    (48) finalExp -> . FLOATLITERAL

    ID              shift and go to state 64
    INTLITERAL      shift and go to state 67
    MINUS           shift and go to state 66
    FLOATLITERAL    shift and go to state 68

    finalExp                       shift and go to state 100

state 86

    (41) expression -> finalExp LESSEQUAL . finalExp
    (45) finalExp -> . ID
    (46) finalExp -> . INTLITERAL
    (47) finalExp -> . MINUS INTLITERAL
    (48) finalExp -> . FLOATLITERAL

    ID              shift and go to state 64
    INTLITERAL      shift and go to state 67
    MINUS           shift and go to state 66
    FLOATLITERAL    shift and go to state 68

    finalExp                       shift and go to state 101

state 87

    (42) expression -> finalExp EQUALSEQUALS . finalExp
    (45) finalExp -> . ID
    (46) finalExp -> . INTLITERAL
    (47) finalExp -> . MINUS INTLITERAL
    (48) finalExp -> . FLOATLITERAL

    ID              shift and go to state 64
    INTLITERAL      shift and go to state 67
    MINUS           shift and go to state 66
    FLOATLITERAL    shift and go to state 68

    finalExp                       shift and go to state 102

state 88

    (43) expression -> finalExp DISTINT . finalExp
    (45) finalExp -> . ID
    (46) finalExp -> . INTLITERAL
    (47) finalExp -> . MINUS INTLITERAL
    (48) finalExp -> . FLOATLITERAL

    ID              shift and go to state 64
    INTLITERAL      shift and go to state 67
    MINUS           shift and go to state 66
    FLOATLITERAL    shift and go to state 68

    finalExp                       shift and go to state 103

state 89

    (47) finalExp -> MINUS INTLITERAL .

    PLUS            reduce using rule 47 (finalExp -> MINUS INTLITERAL .)
    MINUS           reduce using rule 47 (finalExp -> MINUS INTLITERAL .)
    TIMES           reduce using rule 47 (finalExp -> MINUS INTLITERAL .)
    DIV             reduce using rule 47 (finalExp -> MINUS INTLITERAL .)
    GREATER         reduce using rule 47 (finalExp -> MINUS INTLITERAL .)
    LESS            reduce using rule 47 (finalExp -> MINUS INTLITERAL .)
    GREATEREQUAL    reduce using rule 47 (finalExp -> MINUS INTLITERAL .)
    LESSEQUAL       reduce using rule 47 (finalExp -> MINUS INTLITERAL .)
    EQUALSEQUALS    reduce using rule 47 (finalExp -> MINUS INTLITERAL .)
    DISTINT         reduce using rule 47 (finalExp -> MINUS INTLITERAL .)
    LEKEY           reduce using rule 47 (finalExp -> MINUS INTLITERAL .)
    SEMICOLON       reduce using rule 47 (finalExp -> MINUS INTLITERAL .)
    RICOR           reduce using rule 47 (finalExp -> MINUS INTLITERAL .)
    RIPAR           reduce using rule 47 (finalExp -> MINUS INTLITERAL .)


state 90

    (49) access -> ID LECOR INT LEPAR . finalExp RIPAR RICOR
    (45) finalExp -> . ID
    (46) finalExp -> . INTLITERAL
    (47) finalExp -> . MINUS INTLITERAL
    (48) finalExp -> . FLOATLITERAL

    ID              shift and go to state 64
    INTLITERAL      shift and go to state 67
    MINUS           shift and go to state 66
    FLOATLITERAL    shift and go to state 68

    finalExp                       shift and go to state 104

state 91

    (50) access -> ID LECOR finalExp RICOR .

    EQUALS          reduce using rule 50 (access -> ID LECOR finalExp RICOR .)
    SEMICOLON       reduce using rule 50 (access -> ID LECOR finalExp RICOR .)


state 92

    (31) print -> FMT POINT PRINTF LEPAR . STRINGLITERAL COMMA printValue RIPAR

    STRINGLITERAL   shift and go to state 105


state 93

    (27) if -> IF expression LEKEY GOTO . ID SEMICOLON RIKEY

    ID              shift and go to state 106


state 94

    (34) expression -> finalExp PLUS finalExp .

    LEKEY           reduce using rule 34 (expression -> finalExp PLUS finalExp .)
    SEMICOLON       reduce using rule 34 (expression -> finalExp PLUS finalExp .)


state 95

    (35) expression -> finalExp MINUS finalExp .

    LEKEY           reduce using rule 35 (expression -> finalExp MINUS finalExp .)
    SEMICOLON       reduce using rule 35 (expression -> finalExp MINUS finalExp .)


state 96

    (36) expression -> finalExp TIMES finalExp .

    LEKEY           reduce using rule 36 (expression -> finalExp TIMES finalExp .)
    SEMICOLON       reduce using rule 36 (expression -> finalExp TIMES finalExp .)


state 97

    (37) expression -> finalExp DIV finalExp .

    LEKEY           reduce using rule 37 (expression -> finalExp DIV finalExp .)
    SEMICOLON       reduce using rule 37 (expression -> finalExp DIV finalExp .)


state 98

    (38) expression -> finalExp GREATER finalExp .

    LEKEY           reduce using rule 38 (expression -> finalExp GREATER finalExp .)
    SEMICOLON       reduce using rule 38 (expression -> finalExp GREATER finalExp .)


state 99

    (39) expression -> finalExp LESS finalExp .

    LEKEY           reduce using rule 39 (expression -> finalExp LESS finalExp .)
    SEMICOLON       reduce using rule 39 (expression -> finalExp LESS finalExp .)


state 100

    (40) expression -> finalExp GREATEREQUAL finalExp .

    LEKEY           reduce using rule 40 (expression -> finalExp GREATEREQUAL finalExp .)
    SEMICOLON       reduce using rule 40 (expression -> finalExp GREATEREQUAL finalExp .)


state 101

    (41) expression -> finalExp LESSEQUAL finalExp .

    LEKEY           reduce using rule 41 (expression -> finalExp LESSEQUAL finalExp .)
    SEMICOLON       reduce using rule 41 (expression -> finalExp LESSEQUAL finalExp .)


state 102

    (42) expression -> finalExp EQUALSEQUALS finalExp .

    LEKEY           reduce using rule 42 (expression -> finalExp EQUALSEQUALS finalExp .)
    SEMICOLON       reduce using rule 42 (expression -> finalExp EQUALSEQUALS finalExp .)


state 103

    (43) expression -> finalExp DISTINT finalExp .

    LEKEY           reduce using rule 43 (expression -> finalExp DISTINT finalExp .)
    SEMICOLON       reduce using rule 43 (expression -> finalExp DISTINT finalExp .)


state 104

    (49) access -> ID LECOR INT LEPAR finalExp . RIPAR RICOR

    RIPAR           shift and go to state 107


state 105

    (31) print -> FMT POINT PRINTF LEPAR STRINGLITERAL . COMMA printValue RIPAR

    COMMA           shift and go to state 108


state 106

    (27) if -> IF expression LEKEY GOTO ID . SEMICOLON RIKEY

    SEMICOLON       shift and go to state 109


state 107

    (49) access -> ID LECOR INT LEPAR finalExp RIPAR . RICOR

    RICOR           shift and go to state 110


state 108

    (31) print -> FMT POINT PRINTF LEPAR STRINGLITERAL COMMA . printValue RIPAR
    (32) printValue -> . INT LEPAR finalExp RIPAR
    (33) printValue -> . finalExp
    (45) finalExp -> . ID
    (46) finalExp -> . INTLITERAL
    (47) finalExp -> . MINUS INTLITERAL
    (48) finalExp -> . FLOATLITERAL

    INT             shift and go to state 112
    ID              shift and go to state 64
    INTLITERAL      shift and go to state 67
    MINUS           shift and go to state 66
    FLOATLITERAL    shift and go to state 68

    printValue                     shift and go to state 111
    finalExp                       shift and go to state 113

state 109

    (27) if -> IF expression LEKEY GOTO ID SEMICOLON . RIKEY

    RIKEY           shift and go to state 114


state 110

    (49) access -> ID LECOR INT LEPAR finalExp RIPAR RICOR .

    EQUALS          reduce using rule 49 (access -> ID LECOR INT LEPAR finalExp RIPAR RICOR .)
    SEMICOLON       reduce using rule 49 (access -> ID LECOR INT LEPAR finalExp RIPAR RICOR .)


state 111

    (31) print -> FMT POINT PRINTF LEPAR STRINGLITERAL COMMA printValue . RIPAR

    RIPAR           shift and go to state 115


state 112

    (32) printValue -> INT . LEPAR finalExp RIPAR

    LEPAR           shift and go to state 116


state 113

    (33) printValue -> finalExp .

    RIPAR           reduce using rule 33 (printValue -> finalExp .)


state 114

    (27) if -> IF expression LEKEY GOTO ID SEMICOLON RIKEY .

    RIKEY           reduce using rule 27 (if -> IF expression LEKEY GOTO ID SEMICOLON RIKEY .)
    ID              reduce using rule 27 (if -> IF expression LEKEY GOTO ID SEMICOLON RIKEY .)
    FMT             reduce using rule 27 (if -> IF expression LEKEY GOTO ID SEMICOLON RIKEY .)
    IF              reduce using rule 27 (if -> IF expression LEKEY GOTO ID SEMICOLON RIKEY .)
    GOTO            reduce using rule 27 (if -> IF expression LEKEY GOTO ID SEMICOLON RIKEY .)
    RETURN          reduce using rule 27 (if -> IF expression LEKEY GOTO ID SEMICOLON RIKEY .)


state 115

    (31) print -> FMT POINT PRINTF LEPAR STRINGLITERAL COMMA printValue RIPAR .

    SEMICOLON       reduce using rule 31 (print -> FMT POINT PRINTF LEPAR STRINGLITERAL COMMA printValue RIPAR .)


state 116

    (32) printValue -> INT LEPAR . finalExp RIPAR
    (45) finalExp -> . ID
    (46) finalExp -> . INTLITERAL
    (47) finalExp -> . MINUS INTLITERAL
    (48) finalExp -> . FLOATLITERAL

    ID              shift and go to state 64
    INTLITERAL      shift and go to state 67
    MINUS           shift and go to state 66
    FLOATLITERAL    shift and go to state 68

    finalExp                       shift and go to state 117

state 117

    (32) printValue -> INT LEPAR finalExp . RIPAR

    RIPAR           shift and go to state 118


state 118

    (32) printValue -> INT LEPAR finalExp RIPAR .

    RIPAR           reduce using rule 32 (printValue -> INT LEPAR finalExp RIPAR .)

